spread operator in javascript
- The spread operator, denoted by three consecutive dots (...), is a powerful feature introduced in ECMAScript 6 (ES6) for working with arrays and iterable objects in JavaScript.
-  It allows you to expand an iterable (e.g., an array, string, or object) into individual elements, which can then be used in various contexts such as function calls, array literals, and object literals.
- Copying Arrays:
const arr1 = [1, 2, 3];
const arr2 = [...arr1]; // Creates a copy of arr1
- Concatenating Arrays:
const arr1 = [1, 2];
const arr2 = [3, 4];
const concatenatedArr = [...arr1, ...arr2]; // [1, 2, 3, 4]
- Adding Elements to Arrays:
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5]; // [1, 2, 3, 4, 5]
- Passing Array Elements as Arguments:
const numbers = [1, 2, 3];
const sum = (a, b, c) => a + b + c;
console.log(sum(...numbers)); // 6

- Strings:
- Splitting Strings into Characters:
const str = "hello";
const chars = [...str]; // ['h', 'e', 'l', 'l', 'o']

Objects:
- Merging Objects:
const obj1 = { foo: 'bar' };
const obj2 = { baz: 'qux' };
const mergedObj = { ...obj1, ...obj2 }; // { foo: 'bar', baz: 'qux' }

- Adding Properties to Objects:
const obj1 = { foo: 'bar' };
const obj2 = { ...obj1, baz: 'qux' }; // { foo: 'bar', baz: 'qux' }

- Function Arguments:
- Passing Multiple Arguments to Functions:
const values = [1, 2, 3];
const sum = (a, b, c) => a + b + c;
console.log(sum(...values)); // 6

- Collecting Remaining Arguments:
const sum = (...args) => args.reduce((acc, val) => acc + val, 0);
console.log(sum(1, 2, 3)); // 6

Other Usages:
- Array Destructuring:
const arr = [1, 2, 3];
const [first, ...rest] = arr;
console.log(first); // 1
console.log(rest); // [2, 3]

- Object Destructuring:
const obj = { foo: 'bar', baz: 'qux' };
const { foo, ...rest } = obj;
console.log(foo); // 'bar'
console.log(rest); // { baz: 'qux' }
